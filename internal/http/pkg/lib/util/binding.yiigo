package util

import (
	"encoding/json"
	"io"
	"net/http"

	"github.com/yiigo/contrib"
	"github.com/yiigo/contrib/validator"
)

func BindJSON(r *http.Request, obj any) error {
	if r.Body != nil && r.Body != http.NoBody {
		defer io.Copy(io.Discard, r.Body)
		if err := json.NewDecoder(r.Body).Decode(obj); err != nil {
			return err
		}
	}
	return validator.ValidateStruct(obj)
}

// BindForm 解析Form表单并校验
func BindForm(r *http.Request, obj any) error {
	switch contrib.ContentType(r.Header) {
	case contrib.ContentForm:
		if err := r.ParseForm(); err != nil {
			return err
		}
	case contrib.ContentFormMultipart:
		if err := r.ParseMultipartForm(contrib.MaxFormMemory); err != nil {
			if err != http.ErrNotMultipart {
				return err
			}
		}
	}
	if err := contrib.MapForm(obj, r.Form); err != nil {
		return err
	}
	return validator.ValidateStruct(obj)
}
