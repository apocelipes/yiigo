package ent

import (
	"context"
	"fmt"
	"runtime/debug"

	"entgo.io/ent/dialect"

	"{{.Module}}/pkg/lib/db"
)

var DB *Client

func Init() error {
	driver, err := db.InitDBDriver(dialect.Postgres, "db")
	if err != nil {
		return err
	}
	DB = NewClient(Driver(driver))
	return nil
}

// Transaction Executes ent transaction with callback function.
// The provided context is used until the transaction is committed or rolledback.
func Transaction(ctx context.Context, fn func(ctx context.Context, tx *Tx) error) (err error) {
	tx, _err := DB.Tx(ctx)
	if _err != nil {
		err = fmt.Errorf("db.Tx: %w", _err)
		return
	}

	defer func() {
		if r := recover(); r != nil {
			_ = tx.Rollback() // if panic, should rollback
			err = fmt.Errorf("transaction: panic recovered: %+v\n%s", r, string(debug.Stack()))
		}
	}()

	err = fn(ctx, tx)
	if err != nil {
		if err_ := tx.Rollback(); err_ != nil {
			err = fmt.Errorf("%w: tx.Rollback: %w", err, err_)
		}
		return
	}
	if err_ := tx.Commit(); err_ != nil {
		err = fmt.Errorf("tx.Commit: %w", err_)
		return
	}
	return
}
