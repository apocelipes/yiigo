package middleware

import (
	"net/http"

	"github.com/shenghui0779/yiigo/metadata"

    "{{.Module}}/pkg/lib/log"
)

// TraceId is a middleware that injects a trace ID into the context of each request.
func TraceId(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		md, ok := metadata.FromIncomingContext(r.Context())
		if !ok {
			md = metadata.Pairs()
		}
		md.Set(log.TracePath, r.URL.Path)
		// traceId已存在，则复用
		if len(md.Get(log.TraceId)) != 0 {
			next.ServeHTTP(w, r)
			return
		}
		// 去header取traceId
		traceId := r.Header.Get(log.TraceId)
		if len(traceId) == 0 {
			traceId = log.NewTraceId()
		}
		// 设置traceId
		md.Set(log.TraceId, traceId)
		ctx := metadata.NewIncomingContext(r.Context(), md)
		w.Header().Set(log.TraceId, traceId)
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}
