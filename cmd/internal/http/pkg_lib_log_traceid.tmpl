package log

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"os"
	"strings"
	"sync/atomic"

    "github.com/shenghui0779/yiigo/metadata"
	"github.com/shenghui0779/yiigo/xhash"
)

const TraceId = "x-trace-id"
const TracePath = "x-trace-path"

var (
	hostname    string
	tracePrefix string
	traceSeq    uint64
)

func init() {
	hostname, _ = os.Hostname()
	if len(hostname) == 0 {
		hostname = "localhost"
	}

	var (
		buf [12]byte
		b64 string
	)
	for len(b64) < 10 {
		_, _ = rand.Read(buf[:])
		b64 = base64.StdEncoding.EncodeToString(buf[:])
		b64 = strings.NewReplacer("+", "", "/", "").Replace(b64)
	}
	tracePrefix = fmt.Sprintf("%s/%s", hostname, b64)
}

// NewTraceId generates a new trace ID in the sequence.
func NewTraceId() string {
	seq := atomic.AddUint64(&traceSeq, 1)
	return xhash.MD5(fmt.Sprintf("%s-%d", tracePrefix, seq))
}

func GetTraceInfo(ctx context.Context) (traceId, path string) {
	traceId = "-"
	path = "-"
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return
	}
	if v := md.Get(TraceId); len(v) != 0 {
		traceId = v[0]
	}
	if v := md.Get(TracePath); len(v) != 0 {
		path = v[0]
	}
	return
}
