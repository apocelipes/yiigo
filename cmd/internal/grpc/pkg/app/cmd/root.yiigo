package cmd

import (
	"context"
	"os"
	"os/signal"
	"syscall"

	"{{.Module}}/pkg/{{.AppPkg}}/config"
	"{{.Module}}/pkg/{{.AppPkg}}/server"
	"{{.Module}}/pkg/internal/log"

	"github.com/spf13/cobra"
	"go.uber.org/zap"
)

var cfgFile string

var root = &cobra.Command{
	Use:         "{{.AppName}}",
	Short:       "Go App",
	Long:        "Go App (build with cobra | viper | zap | ent | grpc)",
	Annotations: map[string]string{},
	Version:     "v1.0.0",
	PersistentPreRun: func(cmd *cobra.Command, args []string) {
		config.Init(context.Background(), cfgFile)
	},
	Run: func(cmd *cobra.Command, args []string) {
		// make sure we have a working tempdir in minimal containers, because:
		// os.TempDir(): The directory is neither guaranteed to exist nor have accessible permissions.
		if err := os.MkdirAll(os.TempDir(), 0o775); err != nil {
			log.Error(context.Background(), "Error create temp dir", zap.Error(err))
		}
		serving(context.Background())
	},
}

func serving(ctx context.Context) {
	// 创建一个通道来监听信号
	ch := make(chan os.Signal, 1)
	// 监听特定的系统信号
	signal.Notify(ch, syscall.SIGINT, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM)
	// serve grpc
	go server.ServeGrpc(ctx)
	// serve http
	go server.ServeHttp(ctx)
	// 处理信号
	sig := <-ch
	log.Warn(context.TODO(), "Received system signal", zap.String("signal", sig.String()))
	// 执行清理操作
	config.CleanUp()
	// 退出程序
	os.Exit(0)
}
