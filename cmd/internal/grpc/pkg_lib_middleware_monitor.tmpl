package middleware

import (
	"context"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"google.golang.org/grpc"

	"{{.Module}}/pkg/lib/log"
)

var (
	requestCounter = prometheus.NewCounterVec(prometheus.CounterOpts{
		Namespace: "{{.AppName}}",
		Subsystem: "api",
		Name:      "requests_count",
		Help:      "The total number of grpc request",
	}, []string{"method", "path", "status"})

	requestDuration = prometheus.NewHistogramVec(prometheus.HistogramOpts{
		Namespace: "{{.AppName}}",
		Subsystem: "api",
		Name:      "requests_duration",
		Help:      "The grpc request latency in seconds",
	}, []string{"method", "path", "status"})
)

func init() {
	prometheus.MustRegister(requestCounter)
	prometheus.MustRegister(requestDuration)
}

// Monitor 监控请求次数，时长
func Monitor(ctx context.Context, req interface{}, _ *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {
	now := time.Now().Local()
	_, fullMethod := log.GetTraceInfo(ctx)
	// 请求次数
	requestCounter.With(prometheus.Labels{
		"method": fullMethod,
	}).Inc()
	// 请求时长
	defer func() {
		status := "OK"
		if err != nil {
			status = "ERR"
		}
		requestDuration.With(prometheus.Labels{
			"method": fullMethod,
			"status": status,
		}).Observe(time.Since(now).Seconds())
	}()
	resp, err = handler(ctx, req)
	return
}
