package server

import (
	"context"
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/rs/cors"
	"github.com/spf13/viper"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/health/grpc_health_v1"

	"{{.Module}}/pkg/{{.AppPkg}}/api"
	"{{.Module}}/pkg/lib/log"
)

func ServeHttp(ctx context.Context) {
	addr := ":" + viper.GetString("port.http")
	// Create a gRPC client conn
	conn, err := grpc.NewClient("0.0.0.0:"+viper.GetString("port.grpc"), grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatal(ctx, "Error grpc.NewClient", zap.Error(err))
	}
	defer conn.Close()
	// Create http mux with health check
	mux := runtime.NewServeMux(
		runtime.WithHealthzEndpoint(grpc_health_v1.NewHealthClient(conn)),
		runtime.WithIncomingHeaderMatcher(func(s string) (string, bool) {
			if v, ok := runtime.DefaultHeaderMatcher(s); ok {
				return v, true
			}
			return strings.ToLower(s), true
		}),
		runtime.WithOutgoingHeaderMatcher(func(s string) (string, bool) {
			if s == log.TraceId {
				return s, true
			}
			return runtime.MetadataHeaderPrefix + s, true
		}),
	)
	// Register http handler
	if err = registerHttp(ctx, mux, conn); err != nil {
		log.Fatal(ctx, "Error register http", zap.Error(err))
	}
	// With CORS
	withCors := cors.New(cors.Options{
		// AllowedOrigins:   []string{"*"},
		AllowOriginFunc: func(origin string) bool {
			return true
		},
		AllowedMethods:   []string{http.MethodGet, http.MethodPost, http.MethodPatch, http.MethodPut, http.MethodDelete, http.MethodOptions},
		AllowedHeaders:   []string{"Authorization", "Content-Type", "withCredentials"},
		ExposedHeaders:   []string{log.TraceId}, // 服务器暴露一些自定义的头信息，允许客户端访问
		AllowCredentials: true,
	}).Handler(mux)
	// Serve HTTP server
	s := &http.Server{
		Addr:         addr,
		Handler:      withCors,
		ReadTimeout:  5 * time.Second,
		WriteTimeout: 10 * time.Second,
		IdleTimeout:  10 * time.Second,
	}
	fmt.Println("Serving http on", addr)
	if err = s.ListenAndServe(); err != nil {
		log.Fatal(ctx, "Error ListenAndServe", zap.Error(err))
	}
}

// 服务注册
func registerHttp(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	if err := api.RegisterGreeterHandler(ctx, mux, conn); err != nil {
		return fmt.Errorf("RegisterGreeterHandler: %w", err)
	}
	return nil
}

